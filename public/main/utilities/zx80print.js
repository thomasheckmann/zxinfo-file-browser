const log = require("electron-log");
const screenZX = require("./handleSCR");

// Mapping to ASCII
const cmap_zx80 = [
  " ", // 0x00
  '"',
  "{2}",
  "{3}",
  "{4}",
  "{5}",
  "{6}",
  "{7}",
  "{8}",
  "{9}",
  "{a}",
  "{b}",
  "£",
  "$",
  ":",
  "?",
  "(", // 0x10
  ")",
  "-",
  "+",
  "*",
  "/",
  "=",
  ">",
  "<",
  ";",
  ",",
  ".",
  "0",
  "1",
  "2",
  "3",
  "4", // 0x20
  "5",
  "6",
  "7",
  "8",
  "9",
  "A",
  "B",
  "C",
  "D",
  "E",
  "F",
  "G",
  "H",
  "I",
  "J",
  "K", // 0x30
  "L",
  "M",
  "N",
  "O",
  "P",
  "Q",
  "R",
  "S",
  "T",
  "U",
  "V",
  "W",
  "X",
  "Y",
  "Z",
  null, // 0x40
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null, // 0x50
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null, // 0x60
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null, // 0x70
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  " ", // 0x80
  "|1|",
  "|2|",
  "|3|",
  "|4|",
  "|5|",
  "|6|",
  "|7|",
  "|8|",
  "|9|",
  "|a|",
  "|b|",
  "£",
  "$",
  ":",
  "?",
  "(", // 0x90
  ")",
  "-",
  "+",
  "*",
  "/",
  "=",
  ">",
  "<",
  ";",
  ",",
  ".",
  "0",
  "1",
  "2",
  "3",
  "4", // 0xa0
  "5",
  "6",
  "7",
  "8",
  "9",
  "a",
  "b",
  "c",
  "d",
  "e",
  "f",
  "g",
  "h",
  "i",
  "j",
  "k", // 0xb0
  "l",
  "m",
  "n",
  "o",
  "p",
  "q",
  "r",
  "s",
  "t",
  "u",
  "v",
  "w",
  "x",
  "y",
  "z",
  null, // 0xc0
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null, // 0xd0
  null,
  null,
  null,
  '"',
  " THEN ",
  " TO ",
  ";",
  ",",
  ")",
  "(",
  "NOT ",
  "-",
  "+",
  "*",
  "/",
  " AND ", // 0xe0
  " OR ",
  " ** ",
  "=",
  ">",
  "<",
  "LIST ",
  "RETURN ",
  "CLS ",
  "DIM ",
  "SAVE ",
  "FOR ",
  "GOTO ",
  "POKE ",
  "INPUT ",
  "RANDOMISE ",
  "LET ", // 0xf0
  null,
  null,
  "NEXT ",
  "PRINT ",
  null,
  "NEW ",
  "RUN ",
  "STOP ",
  "CONTINUE ",
  "IF ",
  "GOSUB ",
  "LOAD ",
  "CLEAR ",
  "REM ",
  null,
];

// maps ASCII to ZX80
const ascii_zx80 = new Map([
  [" ", 0x00],
  ['"', 0x01],
  ["£", 0x0c],
  ["$", 0x0d],
  [":", 0x0e],
  ["?", 0x0f],
  ["(", 0x10],
  [")", 0x11],
  ["-", 0x12],
  ["+", 0x13],
  ["*", 0x14],
  ["/", 0x15],
  ["=", 0x16],
  [">", 0x17],
  ["<", 0x18],
  [";", 0x19],
  [",", 0x1a],
  [".", 0x1b],
  ["0", 0x1c],
  ["1", 0x1d],
  ["2", 0x1e],
  ["3", 0x1f],
  ["4", 0x20],
  ["5", 0x21],
  ["6", 0x22],
  ["7", 0x23],
  ["8", 0x24],
  ["9", 0x25],
  ["A", 0x26],
  ["B", 0x27],
  ["C", 0x28],
  ["D", 0x29],
  ["E", 0x2a],
  ["F", 0x2b],
  ["G", 0x2c],
  ["H", 0x2d],
  ["I", 0x2e],
  ["J", 0x2f],
  ["K", 0x30],
  ["L", 0x31],
  ["M", 0x32],
  ["N", 0x33],
  ["O", 0x34],
  ["P", 0x35],
  ["Q", 0x36],
  ["R", 0x37],
  ["S", 0x38],
  ["T", 0x39],
  ["U", 0x3a],
  ["V", 0x3b],
  ["W", 0x3c],
  ["X", 0x3d],
  ["Y", 0x3e],
  ["Z", 0x3f],
]);

/**
 *
 * @param {*} image
 * @param {*} x
 * @param {*} y
 * @param {*} lineData data to print - encoded in ZX80 charset
 * @param {*} showFullList
 * @param {*} inREMline
 * @returns
 */
function printZX80(image, x, y, lineData, showFullList, inREMline) {
  const mylog = log.scope("printZX80");

  mylog.debug("enter()");

  var printData = "";
  for (var i = 0; i < lineData.length; i++) {
    const charVal = lineData.charCodeAt(i);

    // 0x00, 0x3f printbale
    // 0x80, 0xbf inverse
    if (charVal < 0x40) {
      printData += lineData[i];
    } else if (charVal > 0x7f && charVal < 0xc0) {
      printData += String.fromCharCode(charVal - 0x40);
    } else {
      const token = cmap_zx80[charVal];
      if(token) {
        // expand token
        for (var ii = 0; ii < token.length; ii++) {
          const data = ascii_zx80.get(token[ii]);
          printData += String.fromCharCode(data);
        }
      } else {
        printData += String.fromCharCode(ascii_zx80.get("?"));
      }
    }
  }
  return screenZX.printAtZX80(image, x, y, printData, showFullList ? 999999 : 22, -1);
}

exports.printZX80 = printZX80;
exports.mapFromASCII = ascii_zx80;
