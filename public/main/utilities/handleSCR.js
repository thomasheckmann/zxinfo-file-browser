/**
 * Generates image of ZX Spectrum screen data (first 6912 bytes of data), including border - size 320x240.
 *
 * - returns Base64 encoded image
 *   - PNG if no flash is used
 *   - (animated) GIF if use of flash detected
 */

const Jimp = require("jimp");
const { GifFrame, GifUtil, GifCodec } = require("gifwrap");
const log = require("electron-log");

const chars_spectrum = [
  [0, 0, 0, 0, 0, 0, 0, 0], // 32 = space
  [0, 16, 16, 16, 16, 0, 16, 0],
  [0, 36, 36, 0, 0, 0, 0, 0],
  [0, 36, 126, 36, 36, 126, 36, 0],
  [0, 8, 62, 40, 62, 10, 62, 8],
  [0, 98, 100, 8, 16, 38, 70, 0],
  [0, 16, 40, 16, 42, 68, 58, 0],
  [0, 8, 16, 0, 0, 0, 0, 0],
  [0, 4, 8, 8, 8, 8, 4, 0],
  [0, 32, 16, 16, 16, 16, 32, 0],
  [0, 0, 20, 8, 62, 8, 20, 0],
  [0, 0, 8, 8, 62, 8, 8, 0],
  [0, 0, 0, 0, 0, 8, 8, 16],
  [0, 0, 0, 0, 62, 0, 0, 0],
  [0, 0, 0, 0, 0, 24, 24, 0],
  [0, 0, 2, 4, 8, 16, 32, 0],
  [0, 60, 70, 74, 82, 98, 60, 0],
  [0, 24, 40, 8, 8, 8, 62, 0],
  [0, 60, 66, 2, 60, 64, 126, 0],
  [0, 60, 66, 12, 2, 66, 60, 0],
  [0, 8, 24, 40, 72, 126, 8, 0],
  [0, 126, 64, 124, 2, 66, 60, 0],
  [0, 60, 64, 124, 66, 66, 60, 0],
  [0, 126, 2, 4, 8, 16, 16, 0],
  [0, 60, 66, 60, 66, 66, 60, 0],
  [0, 60, 66, 66, 62, 2, 60, 0],
  [0, 0, 0, 16, 0, 0, 16, 0],
  [0, 0, 16, 0, 0, 16, 16, 32],
  [0, 0, 4, 8, 16, 8, 4, 0],
  [0, 0, 0, 62, 0, 62, 0, 0],
  [0, 0, 16, 8, 4, 8, 16, 0],
  [0, 60, 66, 4, 8, 0, 8, 0],
  [0, 60, 74, 86, 94, 64, 60, 0],
  [0, 60, 66, 66, 126, 66, 66, 0],
  [0, 124, 66, 124, 66, 66, 124, 0],
  [0, 60, 66, 64, 64, 66, 60, 0],
  [0, 120, 68, 66, 66, 68, 120, 0],
  [0, 126, 64, 124, 64, 64, 126, 0],
  [0, 126, 64, 124, 64, 64, 64, 0],
  [0, 60, 66, 64, 78, 66, 60, 0],
  [0, 66, 66, 126, 66, 66, 66, 0],
  [0, 62, 8, 8, 8, 8, 62, 0],
  [0, 2, 2, 2, 66, 66, 60, 0],
  [0, 68, 72, 112, 72, 68, 66, 0],
  [0, 64, 64, 64, 64, 64, 126, 0],
  [0, 66, 102, 90, 66, 66, 66, 0],
  [0, 66, 98, 82, 74, 70, 66, 0],
  [0, 60, 66, 66, 66, 66, 60, 0],
  [0, 124, 66, 66, 124, 64, 64, 0],
  [0, 60, 66, 66, 82, 74, 60, 0],
  [0, 124, 66, 66, 124, 68, 66, 0],
  [0, 60, 64, 60, 2, 66, 60, 0],
  [0, 254, 16, 16, 16, 16, 16, 0],
  [0, 66, 66, 66, 66, 66, 60, 0],
  [0, 66, 66, 66, 66, 36, 24, 0],
  [0, 66, 66, 66, 66, 90, 36, 0],
  [0, 66, 36, 24, 24, 36, 66, 0],
  [0, 130, 68, 40, 16, 16, 16, 0],
  [0, 126, 4, 8, 16, 32, 126, 0],
  [0, 14, 8, 8, 8, 8, 14, 0],
  [0, 0, 64, 32, 16, 8, 4, 0],
  [0, 112, 16, 16, 16, 16, 112, 0],
  [0, 16, 56, 84, 16, 16, 16, 0],
  [0, 0, 0, 0, 0, 0, 0, 255],
  [0, 28, 34, 120, 32, 32, 126, 0],
  [0, 0, 56, 4, 60, 68, 60, 0],
  [0, 32, 32, 60, 34, 34, 60, 0],
  [0, 0, 28, 32, 32, 32, 28, 0],
  [0, 4, 4, 60, 68, 68, 60, 0],
  [0, 0, 56, 68, 120, 64, 60, 0],
  [0, 12, 16, 24, 16, 16, 16, 0],
  [0, 0, 60, 68, 68, 60, 4, 56],
  [0, 64, 64, 120, 68, 68, 68, 0],
  [0, 16, 0, 48, 16, 16, 56, 0],
  [0, 4, 0, 4, 4, 4, 36, 24],
  [0, 32, 40, 48, 48, 40, 36, 0],
  [0, 16, 16, 16, 16, 16, 12, 0],
  [0, 0, 104, 84, 84, 84, 84, 0],
  [0, 0, 120, 68, 68, 68, 68, 0],
  [0, 0, 56, 68, 68, 68, 56, 0],
  [0, 0, 120, 68, 68, 120, 64, 64],
  [0, 0, 60, 68, 68, 60, 4, 6],
  [0, 0, 28, 32, 32, 32, 32, 0],
  [0, 0, 56, 64, 56, 4, 120, 0],
  [0, 16, 56, 16, 16, 16, 12, 0],
  [0, 0, 68, 68, 68, 68, 56, 0],
  [0, 0, 68, 68, 40, 40, 16, 0],
  [0, 0, 68, 84, 84, 84, 40, 0],
  [0, 0, 68, 40, 16, 40, 68, 0],
  [0, 0, 68, 68, 68, 60, 4, 56],
  [0, 0, 124, 8, 16, 32, 124, 0],
  [0, 14, 8, 48, 8, 8, 14, 0],
  [0, 8, 8, 8, 8, 8, 8, 0],
  [0, 112, 16, 12, 16, 16, 112, 0],
  [0, 20, 40, 0, 0, 0, 0, 0],
  [60, 66, 153, 161, 161, 153, 66, 60],
];

// 0-63, 64-127 (inverse)
const chars_zx81 = [
  [0, 0, 0, 0, 0, 0, 0, 0],
  [240, 240, 240, 240, 0, 0, 0, 0],
  [15, 15, 15, 15, 0, 0, 0, 0],
  [255, 255, 255, 255, 0, 0, 0, 0],
  [0, 0, 0, 0, 240, 240, 240, 240],
  [240, 240, 240, 240, 240, 240, 240, 240],
  [15, 15, 15, 15, 240, 240, 240, 240],
  [255, 255, 255, 255, 240, 240, 240, 240],
  [170, 85, 170, 85, 170, 85, 170, 85],
  [0, 0, 0, 0, 170, 85, 170, 85],
  [170, 85, 170, 85, 0, 0, 0, 0],
  [0, 36, 36, 0, 0, 0, 0, 0],
  [0, 28, 34, 120, 32, 32, 126, 0],
  [0, 8, 62, 40, 62, 10, 62, 8],
  [0, 0, 0, 16, 0, 0, 16, 0],
  [0, 60, 66, 4, 8, 0, 8, 0],
  [0, 4, 8, 8, 8, 8, 4, 0],
  [0, 32, 16, 16, 16, 16, 32, 0],
  [0, 0, 16, 8, 4, 8, 16, 0],
  [0, 0, 4, 8, 16, 8, 4, 0],
  [0, 0, 0, 62, 0, 62, 0, 0],
  [0, 0, 8, 8, 62, 8, 8, 0],
  [0, 0, 0, 0, 62, 0, 0, 0],
  [0, 0, 20, 8, 62, 8, 20, 0],
  [0, 0, 2, 4, 8, 16, 32, 0],
  [0, 0, 16, 0, 0, 16, 16, 32],
  [0, 0, 0, 0, 0, 8, 8, 16],
  [0, 0, 0, 0, 0, 24, 24, 0],
  [0, 60, 70, 74, 82, 98, 60, 0],
  [0, 24, 40, 8, 8, 8, 62, 0],
  [0, 60, 66, 2, 60, 64, 126, 0],
  [0, 60, 66, 12, 2, 66, 60, 0],
  [0, 8, 24, 40, 72, 126, 8, 0],
  [0, 126, 64, 124, 2, 66, 60, 0],
  [0, 60, 64, 124, 66, 66, 60, 0],
  [0, 126, 2, 4, 8, 16, 16, 0],
  [0, 60, 66, 60, 66, 66, 60, 0],
  [0, 60, 66, 66, 62, 2, 60, 0],
  [0, 60, 66, 66, 126, 66, 66, 0],
  [0, 124, 66, 124, 66, 66, 124, 0],
  [0, 60, 66, 64, 64, 66, 60, 0],
  [0, 120, 68, 66, 66, 68, 120, 0],
  [0, 126, 64, 124, 64, 64, 126, 0],
  [0, 126, 64, 124, 64, 64, 64, 0],
  [0, 60, 66, 64, 78, 66, 60, 0],
  [0, 66, 66, 126, 66, 66, 66, 0],
  [0, 62, 8, 8, 8, 8, 62, 0],
  [0, 2, 2, 2, 66, 66, 60, 0],
  [0, 68, 72, 112, 72, 68, 66, 0],
  [0, 64, 64, 64, 64, 64, 126, 0],
  [0, 66, 102, 90, 66, 66, 66, 0],
  [0, 66, 98, 82, 74, 70, 66, 0],
  [0, 60, 66, 66, 66, 66, 60, 0],
  [0, 124, 66, 66, 124, 64, 64, 0],
  [0, 60, 66, 66, 82, 74, 60, 0],
  [0, 124, 66, 66, 124, 68, 66, 0],
  [0, 60, 64, 60, 2, 66, 60, 0],
  [0, 254, 16, 16, 16, 16, 16, 0],
  [0, 66, 66, 66, 66, 66, 60, 0],
  [0, 66, 66, 66, 66, 36, 24, 0],
  [0, 66, 66, 66, 66, 90, 36, 0],
  [0, 66, 36, 24, 24, 36, 66, 0],
  [0, 130, 68, 40, 16, 16, 16, 0],
  [0, 126, 4, 8, 16, 32, 126, 0],
  [255, 255, 255, 255, 255, 255, 255, 255],
  [15, 15, 15, 15, 255, 255, 255, 255],
  [240, 240, 240, 240, 255, 255, 255, 255],
  [0, 0, 0, 0, 255, 255, 255, 255],
  [255, 255, 255, 255, 15, 15, 15, 15],
  [15, 15, 15, 15, 15, 15, 15, 15],
  [240, 240, 240, 240, 15, 15, 15, 15],
  [0, 0, 0, 0, 15, 15, 15, 15],
  [85, 170, 85, 170, 85, 170, 85, 170],
  [255, 255, 255, 255, 85, 170, 85, 170],
  [85, 170, 85, 170, 255, 255, 255, 255],
  [255, 219, 219, 255, 255, 255, 255, 255],
  [255, 227, 221, 135, 223, 223, 129, 255],
  [255, 247, 193, 215, 193, 245, 193, 247],
  [255, 255, 255, 239, 255, 255, 239, 255],
  [255, 195, 189, 251, 247, 255, 247, 255],
  [255, 251, 247, 247, 247, 247, 251, 255],
  [255, 223, 239, 239, 239, 239, 223, 255],
  [255, 255, 239, 247, 251, 247, 239, 255],
  [255, 255, 251, 247, 239, 247, 251, 255],
  [255, 255, 255, 193, 255, 193, 255, 255],
  [255, 255, 247, 247, 193, 247, 247, 255],
  [255, 255, 255, 255, 193, 255, 255, 255],
  [255, 255, 235, 247, 193, 247, 235, 255],
  [255, 255, 253, 251, 247, 239, 223, 255],
  [255, 255, 239, 255, 255, 239, 239, 223],
  [255, 255, 255, 255, 255, 247, 247, 239],
  [255, 255, 255, 255, 255, 231, 231, 255],
  [255, 195, 185, 181, 173, 157, 195, 255],
  [255, 231, 215, 247, 247, 247, 193, 255],
  [255, 195, 189, 253, 195, 191, 129, 255],
  [255, 195, 189, 243, 253, 189, 195, 255],
  [255, 247, 231, 215, 183, 129, 247, 255],
  [255, 129, 191, 131, 253, 189, 195, 255],
  [255, 195, 191, 131, 189, 189, 195, 255],
  [255, 129, 253, 251, 247, 239, 239, 255],
  [255, 195, 189, 195, 189, 189, 195, 255],
  [255, 195, 189, 189, 193, 253, 195, 255],
  [255, 195, 189, 189, 129, 189, 189, 255],
  [255, 131, 189, 131, 189, 189, 131, 255],
  [255, 195, 189, 191, 191, 189, 195, 255],
  [255, 135, 187, 189, 189, 187, 135, 255],
  [255, 129, 191, 131, 191, 191, 129, 255],
  [255, 129, 191, 131, 191, 191, 191, 255],
  [255, 195, 189, 191, 177, 189, 195, 255],
  [255, 189, 189, 129, 189, 189, 189, 255],
  [255, 193, 247, 247, 247, 247, 193, 255],
  [255, 253, 253, 253, 189, 189, 195, 255],
  [255, 187, 183, 143, 183, 187, 189, 255],
  [255, 191, 191, 191, 191, 191, 129, 255],
  [255, 189, 153, 165, 189, 189, 189, 255],
  [255, 189, 157, 173, 181, 185, 189, 255],
  [255, 195, 189, 189, 189, 189, 195, 255],
  [255, 131, 189, 189, 131, 191, 191, 255],
  [255, 195, 189, 189, 173, 181, 195, 255],
  [255, 131, 189, 189, 131, 187, 189, 255],
  [255, 195, 191, 195, 253, 189, 195, 255],
  [255, 1, 239, 239, 239, 239, 239, 255],
  [255, 189, 189, 189, 189, 189, 195, 255],
  [255, 189, 189, 189, 189, 219, 231, 255],
  [255, 189, 189, 189, 189, 165, 219, 255],
  [255, 189, 219, 231, 231, 219, 189, 255],
  [255, 125, 187, 215, 239, 239, 239, 255],
  [255, 129, 251, 247, 239, 223, 129, 255],
];

// Mapping to ASCII
const cmap_zx81 = [
  " ",
  "{1}",
  "{2}",
  "{3}",
  "{4}",
  "{5}",
  "{6}",
  "{7}",
  "{8}",
  "{9}",
  "{10}",
  '"',
  "£",
  "$",
  ":",
  "?",
  "(",
  ")",
  ">",
  "<",
  "=",
  "+",
  "-",
  "*",
  "/",
  ";",
  ",",
  ".",
  "0",
  "1",
  "2",
  "3",
  "4",
  "5",
  "6",
  "7",
  "8",
  "9",
  "A",
  "B",
  "C",
  "D",
  "E",
  "F",
  "G",
  "H",
  "I",
  "J",
  "K",
  "L",
  "M",
  "N",
  "O",
  "P",
  "Q",
  "R",
  "S",
  "T",
  "U",
  "V",
  "W",
  "X",
  "Y",
  "Z",
  "RND ",
  "INKEY$",
  "PI ",
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  "#",
  "|1|",
  "|2|",
  "|3|",
  "|4|",
  "|5|",
  "|6|",
  "|7|",
  "|8|",
  "|9|",
  "|10|",
  '"',
  "£",
  "$",
  ":",
  "?",
  "(",
  ")",
  ">",
  "<",
  "=",
  "+",
  "-",
  "*",
  "/",
  ";",
  ",",
  ".",
  "0",
  "1",
  "2",
  "3",
  "4",
  "5",
  "6",
  "7",
  "8",
  "9",
  "a",
  "b",
  "c",
  "d",
  "e",
  "f",
  "g",
  "h",
  "i",
  "j",
  "k",
  "l",
  "m",
  "n",
  "o",
  "p",
  "q",
  "r",
  "s",
  "t",
  "u",
  "v",
  "w",
  "x",
  "y",
  "z",
  '"',
  "AT ",
  "TAB ",
  null,
  "CODE ",
  "VAL ",
  "LEN ",
  "SIN ",
  "COS ",
  "TAN ",
  "ASN ",
  "ACS ",
  "ATN ",
  "LN ",
  "EXP ",
  "INT ",
  "SQR ",
  "SGN ",
  "ABS ",
  "PEEK ",
  "USR ",
  "STR$ ",
  "CHR$ ",
  "NOT ",
  "**",
  " OR ",
  " AND ",
  "<=",
  ">=",
  "<>",
  " THEN ",
  " TO ",
  " STEP ",
  "LPRINT ",
  "LLIST ",
  "STOP ",
  "SLOW ",
  "FAST ",
  "NEW ",
  "SCROLL ",
  "CONT ",
  "DIM ",
  "REM ",
  "FOR ",
  "GOTO ",
  "GOSUB ",
  "INPUT ",
  "LOAD ",
  "LIST ",
  "LET ",
  "PAUSE ",
  "NEXT ",
  "POKE ",
  "PRINT ",
  "PLOT ",
  "RUN ",
  "SAVE ",
  "RAND ",
  "IF ",
  "CLS ",
  "UNPLOT ",
  "CLEAR ",
  "RETURN ",
  "COPY ",
];

// maps ASCII to ZX81
const ascii_zx81 = new Map([
  [' ', 0x00],
  ['"', 0x0b],
  ['£', 0x0c],
  ['$', 0x0d],
  [':', 0x0e],
  ['?', 0x0f],
  ['(', 0x10],
  [')', 0x11],
  ['>', 0x12],
  ['<', 0x13],
  ['=', 0x14],
  ['+', 0x15],
  ['-', 0x16],
  ['*', 0x17],
  ['/', 0x18],
  [';', 0x19],
  [',', 0x1a],
  ['.', 0x1b],
  ['0', 0x1c],
  ['1', 0x1d],
  ['2', 0x1e],
  ['3', 0x1f],
  ['4', 0x20],
  ['5', 0x21],
  ['6', 0x22],
  ['7', 0x23],
  ['8', 0x24],
  ['9', 0x25],
  ['A', 0x26],
  ['B', 0x27],
  ['C', 0x28],
  ['D', 0x29],
  ['E', 0x2a],
  ['F', 0x2b],
  ['G', 0x2c],
  ['H', 0x2d],
  ['I', 0x2e],
  ['J', 0x2f],
  ['K', 0x30],
  ['L', 0x31],
  ['M', 0x32],
  ['N', 0x33],
  ['O', 0x34],
  ['P', 0x35],
  ['Q', 0x36],
  ['R', 0x37],
  ['S', 0x38],
  ['T', 0x39],
  ['U', 0x3a],
  ['V', 0x3b],
  ['W', 0x3c],
  ['X', 0x3d],
  ['Y', 0x3e],
  ['Z', 0x3f],
]);

// 76543210
// FBPPPIII
// Flash: approx. every 0.64 sec.
const colors = [
  /* bright 0 */
  "#000000",
  "#0000D7",
  "#D70000",
  "#D700D7",
  "#00D700",
  "#00D7D7",
  "#D7D700",
  "#D7D7D7",
  /* brigth 1 */
  "#000000",
  "#0000FF",
  "#FF0000",
  "#FF00FF",
  "#00FF00",
  "#00FFFF",
  "#FFFF00",
  "#FFFFFF",
];

const offsetX = 32,
  offsetY = 24;

// Create GIF (using flash) or PNG of Spectrum memory (screen)
function createSCR(data, border) {
  let frame0 = new Jimp(320, 240, Jimp.cssColorToHex(colors[border]), (err, image) => {
    if (err) throw err;
  });

  let frame1 = new Jimp(320, 240, Jimp.cssColorToHex(colors[border]), (err, image) => {
    if (err) throw err;
  });

  var useFlash = false;
  for (let index = 0; index < 6144; index++) {
    const adr = 0x4000 + index;
    const y = ((adr & 0b0000011100000000) >> 8) + ((adr & 0b0000000011100000) >> 2) + ((adr & 0b0001100000000000) >> 5);
    const x = adr & 0b00011111;
    let byte = data[index];

    let attrY = y >> 3;

    let attr = data[6144 + (attrY * 32 + x)];
    let ink = attr & 0b00000111;
    let pap = (attr >> 3) & 0b00000111;
    let flash = attr & 0b10000000;
    let bright = attr & 0b01000000;
    if (bright) {
      ink += 8;
      pap += 8;
    }
    if (flash) {
      useFlash = true;
      //
    }

    for (let b = 0; b < 8; b++) {
      if (byte & (128 >> b)) {
        frame0.setPixelColor(Jimp.cssColorToHex(colors[ink]), offsetX + x * 8 + b, offsetY + y);
        if (flash) {
          frame1.setPixelColor(Jimp.cssColorToHex(colors[pap]), offsetX + x * 8 + b, offsetY + y);
        } else {
          frame1.setPixelColor(Jimp.cssColorToHex(colors[ink]), offsetX + x * 8 + b, offsetY + y);
        }
      } else {
        frame0.setPixelColor(Jimp.cssColorToHex(colors[pap]), offsetX + x * 8 + b, offsetY + y);
        if (flash) {
          frame1.setPixelColor(Jimp.cssColorToHex(colors[ink]), offsetX + x * 8 + b, offsetY + y);
        } else {
          frame1.setPixelColor(Jimp.cssColorToHex(colors[pap]), offsetX + x * 8 + b, offsetY + y);
        }
      }
    }
  }

  if (useFlash) {
    const frames = [];
    let frame = new GifFrame(320, 240, { delayCentisecs: 50 });
    frame.bitmap.data = frame0.bitmap.data;
    frames.push(frame);
    frame = new GifFrame(320, 240, { delayCentisecs: 50 });
    frame.bitmap.data = frame1.bitmap.data;
    frames.push(frame);
    const codec = new GifCodec();
    return codec.encodeGif(frames, { loops: 0 });
  } else {
    return frame0.getBase64Async(Jimp.MIME_PNG);
  }
}

function _printAt(image, x, y, text, model) {
  const mylog = log.scope("_printAt");

  var charset;
  var charOffset = 32;
  if (model === "ZX81") {
    charset = chars_zx81;
    charOffset = 0;
  } else {
    charset = chars_spectrum;
    charOffset = 32;
  }

  var my_x = x;
  var my_y = y;
  for (var i = 0; i < text.length; i++) {
    const c = text.charCodeAt(i) - charOffset;
    if (c < 0) {
      // ignore, non-printable
    } else if (my_y < 22) {
      const fontData = charset[c];
      for (var r = 0; r < 8; r++) {
        const byte = fontData[r];
        const yc = offsetY + my_y * 8 + r;
        // byte = nnnnnnnn
        for (var b = 0; b < 8; b++) {
          const xc = offsetX + my_x * 8 + b;
          const pixel = byte & ((0b10000000 >> b) & 0xff);
          if (pixel) {
            image.setPixelColor(Jimp.cssColorToHex(colors[0]), xc, yc);
          } else {
            image.setPixelColor(Jimp.cssColorToHex(colors[7]), xc, yc);
          }
        }
      }
      my_x++;
      if (my_x > 31) {
        my_x = 0;
        my_y += 1;
      }
    }
  }
  return my_y;
}

function printAtZX81(image, x, y, text) {
  const mylog = log.scope("printAtZX81");

  // convert to "printable", bit 7 = 1, inverse -
  var zx81string = "";
  for (var i = 0; i < text.length; i++) {
    const charVal = text.charCodeAt(i);

    if (charVal < 64) {
      // The character set has 64 unique glyphs present at code points 0–63
      zx81string += text[i];
    } else if (127 < charVal && charVal < 192) {
      // inverse video; corresponding to code points 128–191
      zx81string += String.fromCharCode(charVal - 64);
    } else {
      // lookup
      const mapped = cmap_zx81[charVal];
      if (mapped) {
        // map from ASCII to ZX81
        for(var ii = 0; ii < mapped.length; ii++) {
          zx81string+=String.fromCharCode(ascii_zx81.get(mapped[ii]));
        }
      }
      else {
        zx81string += String.fromCharCode(15); // ?  question mark
      }
    }
  }
  return _printAt(image, x, y, zx81string, "ZX81");
}

function printAt(image, x, y, text) {
  const mylog = log.scope("printAt");

  mylog.debug(`${text}`);
  return _printAt(image, x, y, text, "SPECTRUM");
}

exports.createSCR = createSCR;
exports.printAt = printAt;
exports.printAtZX81 = printAtZX81;
